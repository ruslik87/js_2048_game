{"version":3,"sources":["scripts/main.js"],"names":["startTouchX","startTouchY","endTouchX","endTouchY","gameField","document","querySelector","fieldRows","querySelectorAll","button","score","highScore","messageWin","messageStart","messageLose","highScoreKey","gameStateKey","userDataHighScore","localStorage","getItem","userDataGameState","cellsCoords","innerText","JSON","parse","fieldState","scoreState","start","updateGameField","actionMix","direction","shift","checkEndOfGame","generate","setUserData","infoScore","infoHighScore","gameState","setItem","stringify","reset","row","i","length","hidden","classList","forEach","num","col","cell","children","add","filterEmpty","cells","filter","addScore","value","cellsX","cellsY","getCells","isFilterEmpty","reverse","push","emptyCells","genNumber","Math","ceil","random","randomIndex","floor","counter","includes","lose","cellX","nextCellX","cellY","nextCellY","addEventListener","e","target","contains","preventDefault","changedTouches","clientX","clientY","directionX","directionY","key"],"mappings":"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","file":"main.1080d235.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst button = document.querySelector('button');\nconst score = document.querySelector('.game-score');\nconst highScore = document.querySelector('.game-high-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst highScoreKey = 'highScore';\nconst gameStateKey = 'gameState';\nconst userDataHighScore = localStorage.getItem(highScoreKey);\nconst userDataGameState = localStorage.getItem(gameStateKey);\nlet cellsCoords = {\n  0: [0, 0, 0, 0],\n  1: [0, 0, 0, 0],\n  2: [0, 0, 0, 0],\n  3: [0, 0, 0, 0],\n};\nlet startTouchX;\nlet startTouchY;\nlet endTouchX;\nlet endTouchY;\n\nif (userDataHighScore) {\n  highScore.innerText = userDataHighScore;\n}\n\nif (userDataGameState) {\n  const [fieldState, scoreState] = JSON.parse(userDataGameState);\n\n  cellsCoords = fieldState;\n  score.innerText = scoreState;\n\n  start();\n  updateGameField();\n}\n\nbutton.addEventListener('click', (e) => {\n  if (e.target.classList.contains('start')) {\n    start();\n  } else {\n    reset();\n  }\n  generate();\n  generate();\n  setUserData();\n});\n\ngameField.addEventListener('touchstart', (e) => {\n  e.preventDefault();\n  startTouchX = e.changedTouches[0].clientX;\n  startTouchY = e.changedTouches[0].clientY;\n});\n\ngameField.addEventListener('touchend', (e) => {\n  if (!button.classList.contains('restart')) {\n    return;\n  }\n\n  endTouchX = e.changedTouches[0].clientX;\n  endTouchY = e.changedTouches[0].clientY;\n\n  const directionX = startTouchX - endTouchX;\n  const directionY = startTouchY - endTouchY;\n  const minSwipe = 50;\n\n  if (directionX > minSwipe && directionX > directionY) {\n    return actionMix('left');\n  }\n\n  if (directionX < -minSwipe && directionX < directionY) {\n    return actionMix('right');\n  }\n\n  if (directionY > minSwipe) {\n    return actionMix('up');\n  }\n\n  if (directionY < -minSwipe) {\n    return actionMix('down');\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (!button.classList.contains('restart')) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      actionMix('left');\n      break;\n\n    case 'ArrowRight':\n      actionMix('right');\n      break;\n\n    case 'ArrowUp':\n      actionMix('up');\n      break;\n\n    case 'ArrowDown':\n      actionMix('down');\n      break;\n  }\n});\n\nfunction actionMix(direction) {\n  shift(direction);\n  checkEndOfGame();\n  generate();\n  setUserData();\n}\n\nfunction setUserData() {\n  const infoScore = +score.innerText;\n  const infoHighScore = +highScore.innerText;\n  const gameState = [cellsCoords, infoScore];\n\n  if (infoScore > infoHighScore) {\n    highScore.innerText = score.innerText;\n    localStorage.setItem(highScoreKey, infoScore);\n  }\n\n  localStorage.setItem(gameStateKey, JSON.stringify(gameState));\n}\n\nfunction reset() {\n  for (const row in cellsCoords) {\n    for (let i = 0; i < cellsCoords[row].length; i++) {\n      cellsCoords[row][i] = 0;\n    }\n  }\n  messageWin.hidden = true;\n  messageLose.hidden = true;\n  score.innerText = 0;\n  updateGameField();\n}\n\nfunction start() {\n  button.classList = 'button restart';\n  button.innerText = 'Restart';\n  messageStart.hidden = true;\n}\n\nfunction updateGameField() {\n  for (const row in cellsCoords) {\n    cellsCoords[row].forEach((num, col) => {\n      const cell = fieldRows[row].children[col];\n\n      if (num > 0) {\n        cell.innerText = num;\n        cell.classList = 'field-cell';\n        cell.classList.add(`field-cell--${num}`);\n      } else {\n        cell.innerText = '';\n        cell.classList = 'field-cell';\n      }\n    });\n  }\n}\n\nfunction filterEmpty(cells) {\n  return cells.filter(cell => cell !== 0);\n}\n\nfunction addScore(value) {\n  score.innerText = +score.innerText + value;\n}\n\nfunction shift(direction) {\n  for (const row in cellsCoords) {\n    const cellsX = cellsCoords[row];\n    const cellsY = [];\n    let cells;\n\n    const getCells = (isFilterEmpty) => {\n      switch (direction) {\n        case 'left':\n          isFilterEmpty\n            ? cells = filterEmpty(cellsX)\n            : cellsCoords[row] = cells;\n          break;\n\n        case 'right':\n          isFilterEmpty\n            ? cells = filterEmpty(cellsX).reverse()\n            : cellsCoords[row] = cells.reverse();\n          break;\n\n        case 'up':\n          if (isFilterEmpty) {\n            cells = filterEmpty(cellsY);\n          } else {\n            for (let i = 0; i < cellsCoords[row].length; i++) {\n              cellsCoords[i][row] = cells[i];\n            }\n          }\n          break;\n\n        case 'down':\n          if (isFilterEmpty) {\n            cells = filterEmpty(cellsY).reverse();\n          } else {\n            cells = cells.reverse();\n\n            for (let i = 0; i < cellsCoords[row].length; i++) {\n              cellsCoords[i][row] = cells[i];\n            }\n          }\n          break;\n      }\n    };\n\n    for (let i = 0; i < cellsCoords[row].length; i++) {\n      cellsY.push(cellsCoords[i][row]);\n    }\n\n    getCells(true);\n\n    for (let i = 0; i < cells.length - 1; i++) {\n      if (cells[i] === cells[i + 1]) {\n        addScore(cells[i]);\n        cells[i] *= 2;\n        cells[i + 1] = 0;\n      }\n    }\n    cells = filterEmpty(cells);\n\n    while (cells.length < 4) {\n      cells.push(0);\n    }\n\n    getCells(false);\n  }\n}\n\nfunction generate() {\n  let emptyCells = 0;\n\n  for (const row in cellsCoords) {\n    cellsCoords[row].forEach(col => {\n      if (col === 0) {\n        emptyCells++;\n      }\n    });\n  }\n\n  const genNumber = Math.ceil(Math.random() * 10);\n  const randomIndex = Math.floor(Math.random() * emptyCells);\n  let counter = 0;\n\n  for (const row in cellsCoords) {\n    for (let i = 0; i < cellsCoords[row].length; i++) {\n      if (cellsCoords[row][i] === 0) {\n        if (counter === randomIndex) {\n          cellsCoords[row][i] = (genNumber === 1) ? 4 : 2;\n        }\n        counter++;\n      }\n    }\n  }\n  updateGameField();\n}\n\nfunction checkEndOfGame() {\n  let win = false;\n\n  for (const row in cellsCoords) {\n    win = cellsCoords[row].includes(2048);\n\n    if (win) {\n      messageWin.hidden = false;\n    }\n  }\n\n  let lose = true;\n\n  for (const row in cellsCoords) {\n    if (cellsCoords[row].includes(0)) {\n      lose = false;\n    }\n\n    for (let i = 0; i < cellsCoords[row].length - 1; i++) {\n      const cellX = cellsCoords[row][i];\n      const nextCellX = cellsCoords[row][i + 1];\n      const cellY = cellsCoords[i][row];\n      const nextCellY = cellsCoords[i + 1][row];\n\n      if (cellX === nextCellX || cellY === nextCellY) {\n        lose = false;\n      }\n    }\n  }\n\n  if (lose) {\n    messageLose.hidden = false;\n  }\n}\n"]}